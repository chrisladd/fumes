//
//  CircleSquare.swift
//
//  Created on Feb 6, 2020.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class CircleSquare: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawCircle_square(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 122, height: 70), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 122, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 122, y: resizedFrame.height / 70)
        
        /// label2
        let label2 = NSMutableAttributedString(string: "circle")
        label2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 11)!, range: NSRange(location: 0, length: label2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            label2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label2.length))
        }
        label2.addAttribute(.foregroundColor, value: UIColor(hue: 0.45, saturation: 0.919, brightness: 0.835, alpha: 1), range: NSRange(location: 0, length: label2.length))
        context.saveGState()
        label2.draw(in: CGRect(x: 68.97, y: 5, width: 45, height: 15))
        context.restoreGState()
        
        /// _label1
        let _label1 = NSMutableAttributedString(string: "square")
        _label1.addAttribute(.font, value: UIFont(name: "Helvetica", size: 11)!, range: NSRange(location: 0, length: _label1.length))
        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            _label1.draw(in: CGRect(x: 5.85, y: 5, width: 40.4, height: 15))
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// dot
        let dot = UIBezierPath()
        dot.move(to: CGPoint(x: 22.93, y: 45.85))
        dot.addCurve(to: CGPoint(x: 45.85, y: 22.93), controlPoint1: CGPoint(x: 35.59, y: 45.85), controlPoint2: CGPoint(x: 45.85, y: 35.59))
        dot.addCurve(to: CGPoint(x: 22.93, y: 0), controlPoint1: CGPoint(x: 45.85, y: 10.26), controlPoint2: CGPoint(x: 35.59, y: 0))
        dot.addCurve(to: CGPoint(x: 0, y: 22.93), controlPoint1: CGPoint(x: 10.26, y: 0), controlPoint2: CGPoint(x: 0, y: 10.26))
        dot.addCurve(to: CGPoint(x: 22.93, y: 45.85), controlPoint1: CGPoint(x: 0, y: 35.59), controlPoint2: CGPoint(x: 10.26, y: 45.85))
        dot.close()
        context.saveGState()
        context.translateBy(x: 39.36, y: 10.5)
        dot.usesEvenOddFillRule = true
        UIColor.white.setFill()
        dot.fill()
        dot.lineWidth = 2
        UIColor(hue: 0.068, saturation: 0.837, brightness: 0.769, alpha: 1).setStroke()
        dot.stroke()
        context.restoreGState()
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 30, y: 0))
        rectangle.addLine(to: CGPoint(x: 30, y: 28))
        rectangle.addLine(to: CGPoint(x: 0, y: 28))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 26.48, y: 21)
        rectangle.usesEvenOddFillRule = true
        UIColor(hue: 0.068, saturation: 0.773, brightness: 0.563, alpha: 1).setFill()
        rectangle.fill()
        rectangle.lineWidth = 3
        UIColor.white.setStroke()
        rectangle.stroke()
        context.restoreGState()
        
        /// _triangle
        let _triangle = UIBezierPath()
        _triangle.move(to: CGPoint(x: 16.33, y: 0))
        _triangle.addLine(to: CGPoint(x: 32.66, y: 32.66))
        _triangle.addLine(to: CGPoint(x: 0, y: 32.66))
        _triangle.addLine(to: CGPoint(x: 16.33, y: 0))
        _triangle.close()
        context.saveGState()
        context.translateBy(x: 25.15, y: 27.61)
        _triangle.usesEvenOddFillRule = true
        UIColor(white: 0.73, alpha: 1).setFill()
        _triangle.fill()
        _triangle.lineWidth = 1
        UIColor(white: 0.18, alpha: 1).setStroke()
        _triangle.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfCircle_square() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 122, height: 70), false, 0)
        CircleSquare.drawCircle_square()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
